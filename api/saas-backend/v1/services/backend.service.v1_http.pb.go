// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: api/saas-backend/v1/services/backend.service.v1.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/go-micro-saas/saas-backend/api/saas-backend/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvSaasBackendV1Ping = "/saas.api.backend.servicev1.SrvSaasBackendV1/Ping"

type SrvSaasBackendV1HTTPServer interface {
	// Ping Ping ping
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
}

func RegisterSrvSaasBackendV1HTTPServer(s *http.Server, srv SrvSaasBackendV1HTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/saas-backend/ping", _SrvSaasBackendV1_Ping0_HTTP_Handler(srv))
}

func _SrvSaasBackendV1_Ping0_HTTP_Handler(srv SrvSaasBackendV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.PingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSaasBackendV1Ping)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*resources.PingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.PingResp)
		return ctx.Result(200, reply)
	}
}

type SrvSaasBackendV1HTTPClient interface {
	Ping(ctx context.Context, req *resources.PingReq, opts ...http.CallOption) (rsp *resources.PingResp, err error)
}

type SrvSaasBackendV1HTTPClientImpl struct {
	cc *http.Client
}

func NewSrvSaasBackendV1HTTPClient(client *http.Client) SrvSaasBackendV1HTTPClient {
	return &SrvSaasBackendV1HTTPClientImpl{client}
}

func (c *SrvSaasBackendV1HTTPClientImpl) Ping(ctx context.Context, in *resources.PingReq, opts ...http.CallOption) (*resources.PingResp, error) {
	var out resources.PingResp
	pattern := "/api/v1/saas-backend/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvSaasBackendV1Ping))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
