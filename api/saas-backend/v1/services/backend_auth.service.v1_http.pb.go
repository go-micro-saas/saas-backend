// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: api/saas-backend/v1/services/backend_auth.service.v1.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvSaasBackendAuthV1LoginByEmail = "/saas.api.backend.servicev1.SrvSaasBackendAuthV1/LoginByEmail"
const OperationSrvSaasBackendAuthV1LoginByPhone = "/saas.api.backend.servicev1.SrvSaasBackendAuthV1/LoginByPhone"

type SrvSaasBackendAuthV1HTTPServer interface {
	// LoginByEmail 身份验证-Email登录
	LoginByEmail(context.Context, *resources.LoginByEmailReq) (*resources.LoginResp, error)
	// LoginByPhone 身份验证-手机登录
	LoginByPhone(context.Context, *resources.LoginByPhoneReq) (*resources.LoginResp, error)
}

func RegisterSrvSaasBackendAuthV1HTTPServer(s *http.Server, srv SrvSaasBackendAuthV1HTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/saas-backend/auth/login-by-email", _SrvSaasBackendAuthV1_LoginByEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/saas-backend/auth/login-by-phone", _SrvSaasBackendAuthV1_LoginByPhone0_HTTP_Handler(srv))
}

func _SrvSaasBackendAuthV1_LoginByEmail0_HTTP_Handler(srv SrvSaasBackendAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSaasBackendAuthV1LoginByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByEmail(ctx, req.(*resources.LoginByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvSaasBackendAuthV1_LoginByPhone0_HTTP_Handler(srv SrvSaasBackendAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvSaasBackendAuthV1LoginByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByPhone(ctx, req.(*resources.LoginByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

type SrvSaasBackendAuthV1HTTPClient interface {
	LoginByEmail(ctx context.Context, req *resources.LoginByEmailReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	LoginByPhone(ctx context.Context, req *resources.LoginByPhoneReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
}

type SrvSaasBackendAuthV1HTTPClientImpl struct {
	cc *http.Client
}

func NewSrvSaasBackendAuthV1HTTPClient(client *http.Client) SrvSaasBackendAuthV1HTTPClient {
	return &SrvSaasBackendAuthV1HTTPClientImpl{client}
}

func (c *SrvSaasBackendAuthV1HTTPClientImpl) LoginByEmail(ctx context.Context, in *resources.LoginByEmailReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/saas-backend/auth/login-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSaasBackendAuthV1LoginByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvSaasBackendAuthV1HTTPClientImpl) LoginByPhone(ctx context.Context, in *resources.LoginByPhoneReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/saas-backend/auth/login-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvSaasBackendAuthV1LoginByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
