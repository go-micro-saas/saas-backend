// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package serviceexporter

import (
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/go-micro-saas/saas-backend/app/saas-backend/internal/biz/biz"
	"github.com/go-micro-saas/saas-backend/app/saas-backend/internal/data/data"
	"github.com/go-micro-saas/saas-backend/app/saas-backend/internal/service/dto"
	"github.com/go-micro-saas/saas-backend/app/saas-backend/internal/service/service"
	"github.com/go-micro-saas/service-api/app/account-service"
	"github.com/ikaiguang/go-srv-kit/service/cleanup"
	"github.com/ikaiguang/go-srv-kit/service/setup"
)

// Injectors from wire.go:

func exportServices(launcherManager setuputil.LauncherManager, hs *http.Server, gs *grpc.Server) (cleanuputil.CleanupManager, error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, err
	}
	backendDataRepo := data.NewBackendData(logger)
	serviceAPIManager, err := setuputil.GetServiceAPIManager(launcherManager)
	if err != nil {
		return nil, err
	}
	v := dto.GetAccountV1ServiceNameForGRPC()
	srvUserAuthV1Client, err := accountapi.NewUserAuthV1GRPCClient(serviceAPIManager, v...)
	if err != nil {
		return nil, err
	}
	srvAccountV1Client, err := accountapi.NewAccountV1GRPCClient(serviceAPIManager, v...)
	if err != nil {
		return nil, err
	}
	backendBizRepo := biz.NewBackendBiz(logger, backendDataRepo, srvUserAuthV1Client, srvAccountV1Client)
	srvSaasBackendV1Server := service.NewBackendV1Service(logger, backendBizRepo)
	srvSaasBackendAuthV1Server := service.NewBackendAuthV1Service(logger, backendBizRepo)
	cleanupManager, err := service.RegisterServices(hs, gs, srvSaasBackendV1Server, srvSaasBackendAuthV1Server)
	if err != nil {
		return nil, err
	}
	return cleanupManager, nil
}
